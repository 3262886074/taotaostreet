<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tts.dao.UsersDao">

    <!-- 用户 -->
    <select id="userLogin" resultType="Users">
        SELECT
        u.u_id "uid",
        u.u_nickname "nickName",
        u.u_pwd "upwd",
        u.u_icon "uicon",
        u.u_sex "sex",
        u.u_birth "birth",
        u.u_tel "utel",
        u.u_email "email",
        u.create_time
        FROM
        Users u
        WHERE
        u.u_nickname = #{unickname}
        AND
        u.u_pwd = #{upwd}
    </select>

    <!-- 用户注册 -->
    <insert id="userRegister">
        INSERT INTO Users
        (u_nickname,u_pwd)
        VALUES
        (#{nickname},#{pwd})
    </insert>

    <!-- 根据用户id查找用户资料 -->
    <select id="queryUserInfoByUid" parameterType="long" resultType="Users">
        SELECT
        u.u_id "uid",
        u.u_nickname "nickName",
        u.u_pwd "upwd",
        u.u_icon "uicon",
        u.u_sex "sex",
        u.u_birth "birth",
        u.u_tel "utel",
        u.u_email "email",
        u.create_time
        FROM
        Users u
        WHERE u.u_id = #{uid}
    </select>

    <!-- 根据用户id查找用户所有红包 -->
    <select id="queryRedPackageByUid" parameterType="long" resultType="User_Red_package">
        SELECT
        urp_id,
        money,
        u_id,
        status
        FROM
        User_Red_package
        <where>
            u_id = #{uid}
        </where>
    </select>

    <!-- 根据用户id查找用户所有优惠券 -->
    <select id="queryDiscountCouponByUid" parameterType="long" resultType="Discount_coupon">
        SELECT
        cdc.dc_id,
        cdc.condition,
        cdc.reduce,
        cdc.u_id,
        cdc.status
        FROM
        Commodity_Discount_coupon cdc
        <where>
            cdc.u_id = #{uid}
        </where>
    </select>

    <!-- 根据用户id查找用户收藏商品以及收藏商品的信息 -->
    <select id="queryCollectsByUid" parameterType="long" resultType="User_Collect">
        SELECT
        uc.uc_id,
        uc.u_id,
        uc.c_id,
        c.c_id "commodity.cid",
        c.c_name "commodity.cname",
        c.price "commodity.price",
        c.for_sale_price "commodity.forSalePrice"
        FROM
        User_Collect uc
        INNER JOIN
        Commodity c
        ON
        uc.c_id = c.c_id
        <where>
            u_id = #{uid}
        </where>
    </select>

    <!-- 根据用户id修改用户信息 除了密码 -->
    <update id="updateInfo" parameterType="Users">
        UPDATE Users
        <set>
            <if test="nickName != null and nickName != '' ">
                u_nickname = #{nickName},
            </if>
            <if test="utel != null">
                u_tel = #{utel},
            </if>
            <if test="email != null and email != '' ">
                u_email = #{email}
            </if>
        </set>
        <where>
            u_id = #{uid}
        </where>
    </update>

    <!-- 根据用户id修改登录密码 有多个参数，使用@Param绑定 -->
    <update id="updatePwd">
        UPDATE Users
        <set>
            <if test="upwd != null and upwd != '' ">
                u_pwd = #{upwd}
            </if>
        </set>
        <where>
            u_id = #{uid}
        </where>
    </update>

    <!-- 添加实名认证 -->
    <insert id="addAuthentication">
        INSERT INTO
        User_RealAuthentication (u_id,ura_name,Id_card)
        VALUES
        (#{uid},#{uraName},#{idcard})
    </insert>

    <!-- 根据用户id查找是否已经实名认证 -->
    <select id="queryAuthenticationByUid" parameterType="long" resultType="Users_Authentication">
        SELECT
        ur.ura_id "uraId",
        ur.u_id "users.uid",
        ur.ura_name "uraName",
        ur.Id_card "idcard"
        FROM User_RealAuthentication ur
        WHERE
        ur.u_id = #{uid}
    </select>

    <!-- 根据用户id查找安全问题 -->
    <select id="querySafetyQuestionByUid" parameterType="long" resultType="User_Safety_Question">
        SELECT
        usq.usq_id "usqId",
        usq.question_one "questionOne",
        usq.answer_one "answerOne",
        usq.question_two "questionTwo",
        usq.answer_two "answerTwo",
        usq.u_id "users.uid"
        FROM
        User_Safety_Question usq
        WHERE
        usq.u_id = #{uid}
    </select>

    <!-- 添加安全问题 -->
    <insert id="addSafetyQuestion" parameterType="User_Safety_Question">
        INSERT INTO
        User_Safety_Question (question_one,answer_one,question_two,answer_two,u_id)
        VALUES
        (#{questionOne},#{answerOne},#{questionTwo},#{answerTwo},#{users.uid})
    </insert>

    <!-- 更新安全问题 -->
    <update id="updateSafetyQuestion" parameterType="User_Safety_Question">
        UPDATE User_Safety_Question
        <set>
            question_one = #{questionOne},
            answer_one = #{answerOne},
            question_two = #{questionTwo},
            answer_two = #{answerTwo}
        </set>
        <where>
            u_id = #{users.uid}
        </where>
    </update>

    <!-- 根据用户id查找所有收货地址 status为1则为默认地址 -->
    <select id="getAddressesByUId" parameterType="long" resultType="User_address">
        SELECT
        ua_id "uaId",
        ua_name "uaname",
        ua_tel "uatel",
        location "location",
        address "address",
        u_id,
        status
        FROM
        User_address
        <where>
            u_id = #{uid}
        </where>
    </select>


    <!-- 将用户的地址status为1的都改成0 -->
    <update id="updateUnDefaultAddress" parameterType="long">
        UPDATE User_address
        <set>
            status = 0
        </set>
        <where>
            u_id = #{uid}
            AND status = 1
        </where>
    </update>

    <!-- 根据地址id修改默认地址 -->
    <update id="updateDefaultAddress" parameterType="long">
        UPDATE User_address
        <set>
            status = 1
        </set>
        <where>
            ua_id = #{uaid}
        </where>
    </update>

    <!-- 根据地址id查找地址 -->
    <select id="queryAddressByUaId" parameterType="long" resultType="User_address">
        SELECT
        ua_id "uaId",
        ua_name "uaname",
        ua_tel "uatel",
        location "location",
        address "address",
        u_id,
        status
        FROM
        User_address
        <where>
            ua_id = #{uaid}
        </where>
    </select>

    <!-- 根据地址id隐藏地址 -->
    <update id="deleteAddressByUaId" parameterType="long">
        UPDATE User_address
        SET
        status = -1
        <where>
            ua_id = #{uaid}
        </where>
    </update>

    <!-- 添加地址 多个参数,注意用@param绑定 -->
    <insert id="addOneAddress" parameterType="User_address">
        INSERT INTO User_address
        (ua_name,ua_tel,location,address,u_id)
        VALUES
        (#{uaname},#{uatel},#{location},#{address},#{uid})
    </insert>

    <!--
        1.根据用户id查出订单中的购物车、用户地址
    -->
    <select id="queryOrdersByUid" parameterType="long" resultType="Order">
        SELECT
        o.o_id,
        o.sc_id,
        o.money,
        o.status,
        o.ua_id,
        o.u_id,
        o.create_time,
        sc.sc_id "shoppingCart.scId",
        sc.u_id "shoppingCart.users.uid",
        sc.create_time "shoppingCart.createTime",
        ua.ua_id "userAddress.uaId",
        ua.ua_name "userAddress.uaname",
        ua.ua_tel "userAddress.uatel",
        ua.location "userAddress.location",
        ua.address "userAddress.address",
        ua.u_id,
        ua.status "userAddress.status"
        FROM
        Orders o
        INNER JOIN Shopping_Cart sc
        ON o.sc_id = sc.sc_id
        INNER JOIN User_address ua
        ON ua.ua_id = o.ua_id
        AND o.u_id = #{uid}
        ORDER BY o.o_id
    </select>

    <!-- 2.根据商品条目中的购物车id查出商品信息、商品类别、套餐 -->
    <select id="queryItemsByScid" parameterType="long" resultType="Commodity_items">
        SELECT
        ci.ci_id,
        ci.c_id,
        ci.sc_id,
        ci.number "number",
        c.c_id "commodity.cid",
        c.c_name "commodity.cname",
        c.price "commodity.price",
        c.postage "commodity.postage",
        c.for_sale_price "commodity.forSalePrice",
        ct.ct_id "commodityType.ct_id",
        ct.type_name "commodityType.typeName",
        ct.price "commodityType.price",
        cc.cc_id "commodityCombo.ccid",
        cc.cc_name "commodityCombo.ccname",
        cc.price "commodityCombo.price",
        cp.cp_id "commodity.commodityPics.cpId",
        cp.cp_img "commodity.commodityPics.cpImg"
        FROM Commodity_items ci
        INNER JOIN Commodity c
        ON c.c_id = ci.c_id
        INNER JOIN Commodity_type ct
        ON ct.ct_id = ci.ct_id
        INNER JOIN Commodity_combo cc
        ON cc.cc_id = ci.cc_id
        INNER JOIN Commodity_pics cp
        ON cp.c_id = c.c_id
        WHERE ci.sc_id = #{scid}
        ORDER BY ci.ci_id
    </select>

    <!-- 3.根据订单id查找订单信息 -->
    <select id="queryOrderInfoByOid" parameterType="long" resultType="Order">
        SELECT
        o.o_id,
        o.sc_id,
        o.money,
        o.status,
        o.ua_id,
        o.u_id,
        o.create_time,
        sc.sc_id "shoppingCart.scId",
        sc.u_id "shoppingCart.users.uid",
        sc.create_time "shoppingCart.createTime",
        ua.ua_id "userAddress.uaId",
        ua.ua_name "userAddress.uaname",
        ua.ua_tel "userAddress.uatel",
        ua.location "userAddress.location",
        ua.address "userAddress.address",
        ua.u_id,
        ua.status "userAddress.status"
        FROM
        Orders o
        INNER JOIN Shopping_Cart sc
        ON o.sc_id = sc.sc_id
        INNER JOIN User_address ua
        ON ua.ua_id = o.ua_id
        AND o.o_id = #{oid}
    </select>

    <!-- 用户钱包余额 -->
    <select id="getAccountMoney" parameterType="long" resultType="User_Account">
        SELECT
        ua_id "uaId",
        ua_money "uaMoney"
        FROM user_account
        WHERE u_id = #{uid}
    </select>

    <!-- 一键支付 -->
    <!-- 1.先看库存够不够 -->
    <update id="reduceCommodityNumber">
        UPDATE Commodity
        SET number = number - #{number}
        WHERE c_id = #{cid}
        AND number >= #{number}
    </update>
    <!-- 2.从用户账户扣除相应的金额，如金额不够则购买失败 -->
    <update id="updateAccountMoney">
        UPDATE user_account
        SET ua_money = ua_money - #{money}
        WHERE u_id = #{uid}
        AND ua_money >= #{money}
    </update>
    <!-- 3.以上都成功后，更改订单状态 -->
    <update id="updateOrderStatus" parameterType="long">
        UPDATE Orders
        SET status = 0
        WHERE o_id = #{oid}
    </update>

    <!-- 取消订单 -->
    <!-- 1.修改订单状态为已取消 -->
    <update id="cancelOrder" parameterType="long">
        UPDATE Orders
        SET status = 4
        WHERE o_id = #{oid}
    </update>
    <!-- 2.给用户账户加上订单的钱 money+uid -->
    <update id="returnMoney">
        UPDATE user_account
        SET ua_money = ua_money + #{money}
        WHERE u_id = #{uid}
    </update>
    <!-- 3.给商品加上库存 number + cid -->
    <update id="addCommodityNumber">
        UPDATE Commodity
        SET number = number + #{number}
        WHERE c_id = #{cid}
    </update>

    <!-- 确认收货 -->
    <update id="confirmOrder" parameterType="long">
        UPDATE Orders
        SET status = 2
        WHERE o_id = #{oid}
    </update>

    <!-- 添加评价 -->
    <insert id="addComment">
        INSERT INTO commodity_comment
        (content,ctype,u_id,c_id)
        VALUES
        (#{content},#{type},#{uid},#{cid})
    </insert>
    <!-- 修改订单状态 -->
    <update id="okOrder" parameterType="long">
        UPDATE Orders
        SET status = 3
        WHERE o_id = #{oid}
    </update>
    <!-- 修改用户所有购物车状态 -->


</mapper>
